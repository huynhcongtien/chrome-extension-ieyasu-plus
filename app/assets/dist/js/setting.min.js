"use strict";const checkTimeValid=function(a){return moment(a,"HH:mm:ss",!0).isValid()};chrome.storage.sync.get(["workTimeStart","workTimeEnd"],function(a){new Vue({el:"#app",data:function(){return{workTimeStart:a.workTimeStart,workTimeEnd:a.workTimeEnd,workStartHours:null,workStartMinutes:null,workEndHours:null,workEndMinutes:null,errors:{workTimeStart:null,workTimeEnd:null},hoursOptions:[],minutesOptions:[]}},mounted:function(){for(var a=0;a<24;a++)a<10&&(a="0"+a),this.hoursOptions.push({text:a,value:a});for(var b=0;b<60;b++)b<10&&(b="0"+b),this.minutesOptions.push({text:b,value:b});var c=moment(this.workTimeStart,"HH:mm:ss"),d=moment(this.workTimeEnd,"HH:mm:ss");this.workStartHours=c.format("HH"),this.workStartMinutes=c.format("mm"),this.workEndHours=d.format("HH"),this.workEndMinutes=d.format("mm")},methods:{saveSetting:function(){var a=!1;if(checkTimeValid(this.workTimeStart)||(a=!0,this.errors.workTimeStart="The time is not correct"),checkTimeValid(this.workTimeEnd)||(a=!0,this.errors.workTimeEnd="The time is not correct"),a)$.notify("An error occurred","error");else{this.errors.workTimeStart=null,this.errors.workTimeEnd=null;var b=this.workTimeStart;chrome.storage.sync.set({workTimeStart:b},function(){console.log("Value of working start is set to: "+b)});var c=this.workTimeEnd;chrome.storage.sync.set({workTimeEnd:c},function(){console.log("Value of working end is set to: "+c)}),$.notify("Save successful","success")}}}})}),$(function(){});